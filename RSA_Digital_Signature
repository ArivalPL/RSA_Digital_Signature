import tkinter as tk
from tkinter import messagebox, filedialog
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA3_256
import os
import cv2
import numpy as np

file_to_verify_path = None
key_path = None
random_bits = []
bit_index = 0
signature_file = None
save_dir = os.getcwd()
private_key = None
public_key = None

# Generate random bits from images (TRNG function)
def generate_random_bits_from_images(image_folder, num_needed):
    image_files = [os.path.join(image_folder, f) for f in os.listdir(image_folder) if
                   f.endswith(('png', 'jpg', 'jpeg'))]
    final_list = []
    num_so_far = 0

    for i, image_file in enumerate(image_files):
        if num_so_far >= num_needed:
            break

        image = cv2.imread(image_file, cv2.IMREAD_GRAYSCALE)
        if image is None:
            continue

        image = image.flatten()
        valid_pixels = image[(image >= 3) & (image <= 252)]
        sublist = np.bitwise_and(valid_pixels, 1)
        if i % 2 == 0:
            sublist = np.bitwise_xor(sublist, 1)

        additional_entropy = np.frombuffer(os.urandom(len(sublist)), dtype=np.uint8) % 2
        sublist = np.bitwise_xor(sublist, additional_entropy)

        bits_needed = num_needed - num_so_far
        if len(sublist) > bits_needed:
            sublist = sublist[:bits_needed]

        final_list.extend(sublist)
        num_so_far += len(sublist)

        # Print debug information
        print(f"Processed {i + 1}/{len(image_files)} images, generated {num_so_far}/{num_needed} bits so far.")

        if num_so_far >= num_needed:
            break

    print(f"Random bits generated.")
    return final_list


# Convert bits to bytes
def bits_to_bytes(bits):
    byte_array = bytearray()
    for i in range(0, len(bits), 8):
        byte = ''.join(map(str, bits[i:i + 8]))
        if len(byte) == 8:
            byte_array.append(int(byte, 2))
    return bytes(byte_array)


# Generate random data for the RNG
def my_rng(size):
    global bit_index, random_bits

    bits_needed = size * 8  # Calculate the number of bits needed

    if bit_index + bits_needed > len(random_bits):
        raise ValueError("Not enough random bits available")  # Check if there are enough random bits available

    bits = random_bits[bit_index:bit_index + bits_needed]  # Get the required bits
    bit_index += bits_needed  # Update the bit index

    return bits_to_bytes(bits)  # Convert bits to bytes and return


# Generate RSA keys
def generate_keys():
    global private_key, public_key, save_dir

    key = RSA.generate(2048, randfunc=my_rng)  # Generate RSA key pair using custom RNG
    private_key = key.export_key()
    public_key = key.publickey().export_key()

    save_dir = filedialog.askdirectory(title="Select Directory to Save Keys")  # Ask user to select save directory
    save_dir_entry.config(state=tk.NORMAL)
    save_dir_entry.delete(0, tk.END)
    save_dir_entry.insert(0, save_dir)
    save_dir_entry.config(state=tk.DISABLED)

    if not save_dir:
        status_label.config(text="Error: No directory selected.")
        messagebox.showerror("Error", "No directory selected.")
        return

    with open(os.path.join(save_dir, "private.pem"), "wb") as priv_file:
        priv_file.write(private_key)  # Save the private key to a file

    with open(os.path.join(save_dir, "public.pem"), "wb") as pub_file:
        pub_file.write(public_key)  # Save the public key to a file

    status_label.config(text="RSA keys generated and saved to files.")
    messagebox.showinfo("Success", "RSA keys generated and saved to files.")  # Show success message


# Sign a file
def sign_file():
    global signature_file

    # Open a dialog to select a file
    file_path = filedialog.askopenfilename(initialdir=save_dir, title="Select File to Sign")
    if not file_path:
        return

    file_entry.config(state=tk.NORMAL)
    file_entry.delete(0, tk.END)
    file_entry.insert(0, file_path)
    file_entry.config(state=tk.DISABLED)

    with open(file_path, "rb") as file:
        file_data = file.read()

    hash_obj = SHA3_256.new(file_data)  # Create a SHA3_256 hash of the file data
    private_key_obj = RSA.import_key(private_key)  # Import the private key

    signature = pkcs1_15.new(private_key_obj).sign(hash_obj)  # Sign the hash with the private key

    signature_file_path = file_path + ".sig"
    with open(signature_file_path, "wb") as sig_file:
        sig_file.write(signature)

    signature_file = signature_file_path

    status_label.config(text="File signed and signature saved.")
    messagebox.showinfo("Success", "File signed and signature saved.")


# Select file to verify
def select_file_to_verify():
    global file_to_verify_path
    file_to_verify_path = filedialog.askopenfilename(initialdir=save_dir, title="Select File to Verify")
    if file_to_verify_path:
        verify_file_entry.config(state=tk.NORMAL)
        verify_file_entry.delete(0, tk.END)
        verify_file_entry.insert(0, file_to_verify_path)
        verify_file_entry.config(state=tk.DISABLED)
        status_label.config(text=f"Selected file to verify: {os.path.basename(file_to_verify_path)}")
        messagebox.showinfo("Success", f"Selected file to verify: {os.path.basename(file_to_verify_path)}")


# Select public key file
def select_key():
    global key_path
    key_path = filedialog.askopenfilename(initialdir=save_dir, title="Select Key File")
    if key_path:
        key_entry.config(state=tk.NORMAL)
        key_entry.delete(0, tk.END)
        key_entry.insert(0, key_path)
        key_entry.config(state=tk.DISABLED)
        status_label.config(text=f"Selected key file: {os.path.basename(key_path)}")
        messagebox.showinfo("Success", f"Selected key file: {os.path.basename(key_path)}")


# Verify the signature of a file
def verify_file():
    if not file_to_verify_path:
        messagebox.showerror("Error", "No file selected for verification.")
        return

    if not key_path:
        messagebox.showerror("Error", "No key file selected.")
        return

    signature_file_path = file_to_verify_path + ".sig"
    if not os.path.exists(signature_file_path):
        messagebox.showerror("Error", "Signature file not found.")
        return

    with open(file_to_verify_path, "rb") as file:
        file_data = file.read()

    with open(signature_file_path, "rb") as sig_file:
        signature = sig_file.read()

    with open(key_path, "rb") as key_file:
        key_data = key_file.read()
        key_obj = RSA.import_key(key_data)  # Import the key from the file

    hash_obj = SHA3_256.new(file_data)

    try:
        pkcs1_15.new(key_obj).verify(hash_obj, signature)
        status_label.config(text="File signature is valid.")
        messagebox.showinfo("Success", "File signature is valid.")
    except (ValueError, TypeError):
        status_label.config(text="Error: File signature is invalid.")
        messagebox.showerror("Error", "File signature is invalid.")


# Generate TRNG bits
def generate_trng_bits():
    global random_bits, bit_index

    folder_selected = filedialog.askdirectory(title="Select Folder with Images")  # Open a dialog to select a folder
    if not folder_selected:
        status_label.config(text="Error: No folder selected.")
        messagebox.showerror("Error", "No folder selected.")
        return

    folder_entry.config(state=tk.NORMAL)
    folder_entry.delete(0, tk.END)
    folder_entry.insert(0, folder_selected)
    folder_entry.config(state=tk.DISABLED)

    num_needed = 10000000  # Number of bits needed
    random_bits = generate_random_bits_from_images(folder_selected, num_needed)  # Generate random bits
    bit_index = 0  # Reset bit index
    status_label.config(text="Random bits generated!")
    messagebox.showinfo("Success", "Random bits generated!")


# Set up the GUI
def setup_gui():
    global generate_trng_button, generate_keys_button, sign_file_button
    global select_file_to_verify_button, select_key_button, verify_file_button
    global status_label, file_to_verify_path, key_path, save_dir
    global folder_entry, save_dir_entry, file_entry, verify_file_entry, key_entry

    root = tk.Tk()
    root.title("Digital Signature")

    # Add background color
    root.configure(bg='#36393f')  # Discord dark theme background color

    # Frame setup
    frame = tk.Frame(root, padx=10, pady=10, bg='#2f3136')  # Slightly lighter dark color
    frame.pack(pady=20, padx=20)

    title_label = tk.Label(frame, text="RSA", font=("Helvetica", 16, "bold"), bg='#2f3136',
                           fg='#ffffff')
    title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))

    trng_label = tk.Label(frame, text="1. Choose path to a folder with images to generate TRNG bits", font=("Helvetica", 10), bg='#2f3136',
                          fg='#b9bbbe')
    trng_label.grid(row=1, column=0, pady=5, padx=5, sticky="w")
    generate_trng_button = tk.Button(frame, text="Generate TRNG Bits", command=generate_trng_bits,
                                     font=("Helvetica", 10), bg='#7289da', fg='#ffffff', relief='flat')
    generate_trng_button.grid(row=2, column=0, pady=5, padx=5, sticky="ew")

    folder_entry = tk.Entry(frame, width=40, font=("Helvetica", 10), state='disabled', bg='#40444b', fg='#ffffff',
                            relief='flat')
    folder_entry.grid(row=2, column=1, pady=5, padx=5, sticky="ew")

    rsa_label = tk.Label(frame, text="2. Choose path to save RSA keys", font=("Helvetica", 10), bg='#2f3136', fg='#b9bbbe')
    rsa_label.grid(row=3, column=0, pady=5, padx=5, sticky="w")
    generate_keys_button = tk.Button(frame, text="Generate RSA Keys", command=generate_keys, font=("Helvetica", 10),
                                     bg='#7289da', fg='#ffffff', relief='flat')
    generate_keys_button.grid(row=4, column=0, pady=5, padx=5, sticky="ew")

    save_dir_entry = tk.Entry(frame, width=40, font=("Helvetica", 10), state='disabled', bg='#40444b', fg='#ffffff',
                              relief='flat')
    save_dir_entry.grid(row=4, column=1, pady=5, padx=5, sticky="ew")

    sign_label = tk.Label(frame, text="3. Choose file to sign", font=("Helvetica", 10), bg='#2f3136', fg='#b9bbbe')
    sign_label.grid(row=5, column=0, pady=5, padx=5, sticky="w")
    sign_file_button = tk.Button(frame, text="Sign File", command=sign_file, font=("Helvetica", 10), bg='#7289da',
                                 fg='#ffffff', relief='flat')
    sign_file_button.grid(row=6, column=0, pady=5, padx=5, sticky="ew")

    file_entry = tk.Entry(frame, width=40, font=("Helvetica", 10), state='disabled', bg='#40444b', fg='#ffffff',
                          relief='flat')
    file_entry.grid(row=6, column=1, pady=5, padx=5, sticky="ew")

    verify_file_label = tk.Label(frame, text="4. Select file to verify", font=("Helvetica", 10), bg='#2f3136',
                                 fg='#b9bbbe')
    verify_file_label.grid(row=7, column=0, pady=5, padx=5, sticky="w")
    select_file_to_verify_button = tk.Button(frame, text="Verify File", command=select_file_to_verify,
                                             font=("Helvetica", 10), bg='#7289da', fg='#ffffff', relief='flat')
    select_file_to_verify_button.grid(row=8, column=0, pady=5, padx=5, sticky="ew")

    verify_file_entry = tk.Entry(frame, width=40, font=("Helvetica", 10), state='disabled', bg='#40444b', fg='#ffffff',
                                 relief='flat')
    verify_file_entry.grid(row=8, column=1, pady=5, padx=5, sticky="ew")

    key_label = tk.Label(frame, text="5. Select key file", font=("Helvetica", 10), bg='#2f3136', fg='#b9bbbe')
    key_label.grid(row=9, column=0, pady=5, padx=5, sticky="w")
    select_key_button = tk.Button(frame, text="Select Key", command=select_key, font=("Helvetica", 10), bg='#7289da',
                                  fg='#ffffff', relief='flat')
    select_key_button.grid(row=10, column=0, pady=5, padx=5, sticky="ew")

    key_entry = tk.Entry(frame, width=40, font=("Helvetica", 10), state='disabled', bg='#40444b', fg='#ffffff',
                         relief='flat')
    key_entry.grid(row=10, column=1, pady=5, padx=5, sticky="ew")

    verify_label = tk.Label(frame, text="6. Verify file signature", font=("Helvetica", 10), bg='#2f3136', fg='#b9bbbe')
    verify_label.grid(row=11, column=0, pady=5, padx=5, sticky="w")
    verify_file_button = tk.Button(frame, text="Verify File", command=verify_file, font=("Helvetica", 10),
                                   bg='#7289da', fg='#ffffff', relief='flat')
    verify_file_button.grid(row=12, column=0, columnspan=2, pady=(20, 5), padx=5, sticky="ew")

    status_label = tk.Label(frame, text="", fg="#b9bbbe", font=("Helvetica", 10), bg='#2f3136')
    status_label.grid(row=13, column=0, columnspan=3, pady=10)

    root.mainloop()


setup_gui()
